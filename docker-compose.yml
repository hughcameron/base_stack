version: "3"

networks:
  web:
    external: true

services:
  portainer:
    image: portainer/portainer:latest
    container_name: portainer
    networks:
      - web
    ports:
      - "9000:9000"
    volumes:
      - "portainer_data:/data"
      - "${DOCKER_SOCKET}:/var/run/docker.sock"
    restart: always
    labels:
      traefik.enabled: "true"
      traefik.frontend.rule: "Host:${DOMAIN}"
      traefik.backend:  "port-service"
      traefik.docker.network: "web"
      traefik.port: "9000"

  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      - --api
      - --entrypoints=Name:dashboard Address::8000
      - --entrypoints=Name:http Address::80 Redirect.EntryPoint:https
      - --entrypoints=Name:https Address::443 TLS
      - --defaultentrypoints=https,http
      - --acme
      - --acme.storage=/etc/traefik/acme/acme.json
      - --acme.entryPoint=https
      - --acme.httpChallenge.entryPoint=http
      - --acme.onHostRule=true
      - --acme.email=${EMAIL}
      - --acme.dnsChallenge
      - --acme.dnsChallenge.provider=cloudflare
      - --acme.dnsChallenge.delayBeforeCheck=0
      - --docker
      - --docker.domain=${DOMAIN}
      - --docker.watch
    volumes:
      - ${DOCKER_SOCKET}:/var/run/docker.sock:ro
      - "traefik_data:/etc/traefik/acme"
    labels:
      traefik.enabled: "true"
      traefik.sub.frontend.rule: "Host:monitor.${DOMAIN}"
      traefik.backend: "monitor-service"
      traefik.frontend.auth.basic: "${TRAEFIK_USERNAME}:${TRAEFIK_HTPASSWD}"
      traefik.docker.network: "web"
      traefik.port: "8080"
    networks:
      - web
    dns:
      - 8.8.8.8
      - 8.8.4.4
    ports:
      - "80:80"
      - "443:443"
    environment:
      - CF_API_EMAIL=${EMAIL}
      - CF_API_KEY=${CF_API_KEY}
    restart: unless-stopped

  cloudflare-ddns:
    image: joshuaavalon/cloudflare-ddns
    environment:
      - ZONE=${DOMAIN}
      - HOST=${DOMAIN}
      - EMAIL=${EMAIL}
      - API=${CF_API_KEY}
      - TTL=1
      - PROXY=true
    container_name: cloudflare-ddns
    restart: unless-stopped

  drone:
    volumes:
      - "${DOCKER_SOCKET}:/var/run/docker.sock"
      - "drone_data:/data"
    environment:
      - "DRONE_GITHUB_SERVER=https://github.com"
      - "DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT_ID}"
      - "DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_CLIENT_SECRET}"
      - "DRONE_GIT_ALWAYS_AUTH=false"
      - "DRONE_USER_CREATE=username:${DRONE_GITHUB_USERNAME},admin:true"
      - "DRONE_RUNNER_CAPACITY=2"
      - "DRONE_SERVER_HOST=drone.${DOMAIN}"
      - "DRONE_SERVER_PROTO=https"
      - "DRONE_TLS_AUTOCERT=false"
    labels:
      traefik.enable: "true"
      traefik.frontend.rule: "Host:drone.${DOMAIN}"
      traefik.backend: "drone-service"
      traefik.docker.network: "web"
      traefik.port: "80"
    networks:
      - web
    restart: always
    container_name: drone
    image: "drone/drone:1.0.0-rc.5"

volumes:
  drone_data:
    driver: local
  traefik_data:
    driver: local
  portainer_data:
    driver: local